# Generated by Selenium IDE
import pickle
import random
import time
from pathlib import Path

from selenium import webdriver
from selenium.webdriver.common.by import By

SAVED_USER_PWD = 'xjtuUserPwd.pickle'
SAVED_COOKIES = 'xjtuCookies.pickle'


class TestDefaultSuite():
    def setup_method(self, method):
        self.driver = webdriver.Chrome()
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def wait_for_window(self, timeout=2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def do_login_and_save_cookies(self):
        readPath = open(SAVED_USER_PWD, 'rb')
        user_pwd = pickle.load(readPath)
        readPath.close()
        self.driver.get("https://xueli.xjtudlc.com/login1.aspx")
        self.driver.find_element(By.ID, "txtUserName").send_keys(user_pwd['user'])
        self.driver.find_element(By.ID, "txtPassword").send_keys(user_pwd['pwd'])
        self.driver.find_element(By.ID, "chkIsSaveUserInfo").click()
        time.sleep(10)
        self.driver.find_element(By.ID, "lbtnLogin").click()
        time.sleep(5)
        wbcookies = self.driver.get_cookies()
        outputPath = open(SAVED_COOKIES, 'wb')
        pickle.dump(wbcookies, outputPath)
        outputPath.close()

    def open_index_page(self):
        saved_cookies_file = Path(SAVED_COOKIES)
        if not saved_cookies_file.exists():
            self.do_login_and_save_cookies()
        readPath = open(SAVED_COOKIES, 'rb')
        saved_cookies = pickle.load(readPath)
        readPath.close()
        self.driver.get('https://xueli.xjtudlc.com')
        time.sleep(3)
        ck = self.driver.get_cookies()
        self.driver.delete_all_cookies()
        for cookie in saved_cookies:
            # if self.driver.get_cookie(cookie['name']) is None:
            self.driver.add_cookie(cookie)
        ck = self.driver.get_cookies()
        self.driver.get('https://xueli.xjtudlc.com/StudentCenter/Index.aspx')
        time.sleep(2)

    def do_learn_task(self, task_url):
        self.driver.get(task_url)
        # me.sleep(10)
        time.sleep(30)
        learnbtn = self.driver.find_elements_by_css_selector('#learn-btn')
        if len(learnbtn) > 0:
            learnbtn[0].click()

    def do_learn_course(self, course_url):
        self.driver.get(course_url)
        time.sleep(2)
        self.driver.find_element(By.LINK_TEXT, "目录").click()
        # time.sleep(10000)
        for x in range(1, 2):
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(1)

        tasks = self.driver.find_elements_by_css_selector(
            'div.course-detail-content.js-course-detail-content > ul > li > a')
        taskurls = []
        for task in tasks:
            href = task.get_attribute('href')
            taskurls.append(href)
        for url in taskurls:
            try:
                self.do_learn_task(url)
            except:
                print(url)

    def do_learn_all_loop(self):
        courses = [
            'https://xueli.xjtudlc.com/CourseWare/OpenCourseWareNew.aspx?coursewareid=3182&courseid=26&CourseClassName=xjtudlc&CourseWareName=%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e5%9f%ba%e7%a1%80(MOOC)',
            'https://xueli.xjtudlc.com/CourseWare/OpenCourseWareNew.aspx?coursewareid=3105&courseid=68&CourseClassName=xjtudlc&CourseWareName=%e9%ab%98%e7%ad%89%e6%95%b0%e5%ad%a6(%e4%b8%93%e5%8d%87%e6%9c%ac)(MOOC)',
            'https://xueli.xjtudlc.com/CourseWare/OpenCourseWareNew.aspx?coursewareid=3222&courseid=162&CourseClassName=xjtudlc&CourseWareName=%e8%8b%b1%e8%af%ad(%e4%ba%8c)(MOOC)',
            'https://xueli.xjtudlc.com/CourseWare/OpenCourseWareNew.aspx?coursewareid=3068&courseid=171&CourseClassName=xjtudlc&CourseWareName=%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%8f%8a%e7%bd%91%e7%bb%9c%e5%ba%94%e7%94%a8%e5%9f%ba%e7%a1%80(MOOC)',
            'https://xueli.xjtudlc.com/CourseWare/OpenCourseWareNew.aspx?coursewareid=3229&courseid=1806&CourseClassName=xjtudlc&CourseWareName=%e5%bd%a2%e5%8a%bf%e4%b8%8e%e6%94%bf%e7%ad%96(MOOC)',
            'https://xueli.xjtudlc.com/CourseWare/OpenCourseWareNew.aspx?coursewareid=3228&courseid=1809&CourseClassName=xjtudlc&CourseWareName=%e4%b8%ad%e5%9b%bd%e8%bf%91%e7%8e%b0%e4%bb%a3%e5%8f%b2%e7%ba%b2%e8%a6%81(MOOC)'
        ]

        while True:
            for course in random.sample(courses, 1):
                try:
                    self.do_learn_course(course)
                except:
                    print(course)


ts = TestDefaultSuite()
ts.setup_method(None)
ts.open_index_page()
ts.do_learn_all_loop()
